import numpy as np
#----------------------read file----------------------------------
f = open('train.csv','r')
data = []

for line in f:
	data.append(line.strip().split(','))
f.close()
#////train.csv///

w,h = 480,12*18
x = [[0 for x in range(w)] for y in range(h)] 

for k in range(12):				#column,month
	for l in range (18):		#column,feature
		for i in range(20):		#row,day
			for j in range(3,27):
				if data[(20*k+i)*18+l+1][j] == 'NR':
					x[l+k*18][i*24+j-3] = 0
				else:
					x[l+k*18][i*24+j-3] = float(data[(20*k+i)*18+l+1][j])
#---------------------------variables-------------------------------
X = np.array(x)
print X.shape
b,dLdb = 0,0
w = []
for i in range(162):   
	w.append(0)
b = -0.0876664235298 #5.712 
w[0:162] = [0.090664377643557087, -0.15428187247185959, 0.07231484450856332, -0.11942935876784279, -0.017281076140742105, 0.043673062340200165, -0.057468131205220568, 0.1157708798594195, 0.012148367537009069, -0.054725467824961946, -0.025409370799090204, -0.014099746390894296, -0.013908092346209541, 0.010431881436970269, 0.093226271252511178, 0.066583790018358624, 0.19098495411274868, 0.47165800317000006, 0.121966759238972, 0.023666650492486677, 0.05277216176818033, -0.21944505997392424, 0.37469380003965036, -0.067328355831522663, -0.31392058473608159, 0.24015694711322427, 0.94810063293867053, -0.3703084158991285, -0.0071915380345856745, -0.47224561163758433, -0.52007637326032607, 0.13173071670242703, -0.21058133310002858, -0.31496057771039637, 0.12471436658716284, 0.97108950547542561, 0.03468354780541328, 0.15115909495499727, 0.012213648949987568, 0.071864272896155115, 0.011979114689308809, -0.26235144175756325, 0.062618197460598518, 0.013815905670335577, -0.16155385367923555, 0.028133919937444487, 0.084235589115057991, -0.11266564006283686, 0.051402165925120306, -0.016183765109248505, -0.1529696427958826, -0.043740631954050556, -0.14947328070193178, 0.1198870693383991, -0.00078317036882468826, -0.15498758418152964, 0.095299112582127726, -0.078357622982455452, 0.026729451330541939, 0.15006827383867635, -0.01344291696666426, 0.073984456415167085, 0.14106038803366044, 0.0025354550936695273, 0.010866378038481934, -0.0091324739737586938, -0.024543984141043154, 0.010603217125174962, -0.039583337082302564, -0.010593769983332588, -0.020036102915742062, 0.10172929596195764, 0.0055445021813414191, 0.013097205163892855, -0.03360287657739524, 0.041588339878804684, -0.0078149730500267911, -0.035928807665853477, 0.031035538259443805, -0.002382482418738049, 0.037251934459588742, -0.034737546680066664, -0.013728438940555849, 0.21885224257194835, -0.23845700296101674, -0.0265418714092296, 0.50046802706662652, -0.55559835411934433, 0.021652809917995862, 0.95265827204212594, 0.034677826396725134, -0.0037865807538539158, -0.051397930806803951, 0.006008563234746276, -0.046922880551268017, 0.049292544990312701, 0.017564553367199063, -0.03071190943210049, -0.085611392771153386, -0.018879471958731749, 0.027063723494748428, 0.028175464308461684, -0.060923631781634249, -0.041604318894118149, 0.066387976282017008, -0.10164233076066194, 0.060746100480477766, 0.012590114648402422, -0.25982303993527966, 0.29965851031813534, -0.037755632762038589, -0.094146839154140696, 0.004721519676681411, 0.050790636837656319, -0.11398038438559767, 0.11846748106126451, 0.18278333672258595, -0.027884657649778211, 0.24604293042998246, 0.23692771248368044, -0.40593467382027676, 0.33095450656562941, 0.096221355739368894, -0.13490731306574924, -0.0093042647163846699, 0.55196342888480465, -0.00065911225700236525, 0.0029078845769086423, -0.00059675873680042251, 0.0018289621090588897, 0.0004736612383163796, 0.0014882948741216531, -0.0023497563868940465, 0.00085092254178255864, 0.00019160691533529745, -0.0020378294054690283, -0.00073186660720937335, 0.0010662118253236272, -0.0021678188513093609, 0.00050492922855579006, -7.5331140795226485e-05, -6.44052763817201e-05, -0.0024426861650680824, 0.00050348429893702336, -0.094996605108821852, -0.075241708490993306, 0.14428517005367317, 0.03318242985519284, -0.093733113592660511, -0.034780717682185748, -0.063585830143282812, -0.11039236386223464, -0.060902027054983085, -0.062321568883015023, 0.088833235108348285, -0.046347024017624319, -0.16857556345776781, 0.006168098972870747, 0.25327649421217135, -0.028396118535056893, -0.13070118158230601, 0.077854645570172423] 

dLdw = []
for i in range(162):
	dLdw.append(0)
ypredict = 0
learningrate = 0.9
Gt = []
Gtb = 0
for i in range(162):
	Gt.append(0)
count = 0
#print W
print'--------------------Gradient descent-----------------------------------------'
while True:
	RMSE = 0
	count = count + 1
	for i in range(471):
		for j in range(12):
#--------------------------numbers of x,y data-----------------------------------
			yhat = float(x[18*j+9][i+9])
			xx = []
			for k in range(18):
				xx = xx+x[18*j+k][i:i+9]
			X = np.array(xx)
			W = np.array(w)
			ypredict = np.dot(X,W)+b
			RMSE = RMSE + (yhat-ypredict)**2
#------------------------- Yhat,Ypredict,X ok-----------------------------------
			dLdb = dLdb + (-2)*(yhat-ypredict)
			if count > 50:
				Gtb = Gtb
			else:
				Gtb = Gtb + dLdb**2
			for k in range(162):
				dLdw[k] = dLdw[k] + (-2)*(yhat-ypredict)*xx[k]
				if count > 50:
					Gt[k] = Gt[k]
				else:
					Gt[k] = Gt[k] + dLdb**2
			#print Gt
	#print dLdb,dLdw[1],dLdw[2]
	print '------------------train RMSE-------------------------------'
	RMSE = (float(RMSE/5640))**0.5
	print '----------------------w------------------------------------'
	print w,Gtb,b,RMSE,count
	print '----------------------stop condition---------------------------------'
	if (count == 100):
		print round(b),w
		break
	#if (count%1000 == 0):
			#learningrate = learningrate*2
	for i in range(162):
		if Gt[i]!= 0:
			w[i] = w[i] - learningrate*dLdw[i]/(Gt[i]**0.5)
		b = b - learningrate*dLdb/(Gtb**0.5)
		dLdw[i] = 0
	dLdb = 0
print'--------------------------------------------------------------------------'

fin = open('test_X.csv','r')
data = []
for line in fin:
		data.append(line.strip().split(','))
fin.close()



fout = open('test2.csv','w')
fout.write('id,value\n')
for i in range(240):
	x = []
	for j in range(18):
		for k in range(2,11):
			if data[i*18+j][k] == 'NR':
				x.append(0)
			else:
				x.append(float(data[i*18+j][k]))
	X = np.array(x)
	Y = np.dot(X,W)+b
	fout.write('id_')
	fout.write(str(i))
	fout.write(',')
	fout.write(str(Y))
	fout.write('\n')
print'-------------------------------------------------------'









	
	
	
	
	



























