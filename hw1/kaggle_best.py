import numpy as np
#----------------------read file----------------------------------
f = open('train.csv','r')
data = []

for line in f:
	data.append(line.strip().split(','))
f.close()
#////train.csv///

w,h = 480,12*18
x = [[0 for x in range(w)] for y in range(h)] 

for k in range(12):				#column,month
	for l in range (18):		#column,feature
		for i in range(20):		#row,day
			for j in range(3,27):
				if data[(20*k+i)*18+l+1][j] == 'NR':
					x[l+k*18][i*24+j-3] = 0
				else:
					x[l+k*18][i*24+j-3] = float(data[(20*k+i)*18+l+1][j])
#print x
#---------------------------variables-------------------------------
X = np.array(x)
print X.shape
b,dLdb = 0,0
w = []
for i in range(162):   
	w.append(0)
lambdaa = 0.0001
b = -0.163931308727 #5.715
w[0:162] = [0.081716289676499188, -0.16104696770701327, 0.064639701131125105, -0.10205775773843909, -0.0094507609610010746, 0.048149731322355636, -0.052077979716216853, 0.1706228598733176, -0.055433934412858626, -0.043325214868143405, -0.017913411370348332, -0.011180171858574197, -0.004412368756510506, 0.018245669940541075, 0.09066842804294499, 0.068167484293499114, 0.18945797540152881, 0.45758055916530121, 0.11437600829484183, 0.021966557818721949, 0.049627981202274712, -0.20268588404636537, 0.35909227356231077, -0.058635858948705204, -0.29499563509142362, 0.2358269037935895, 0.91931283662711993, -0.36631923724674731, -0.025548450476061215, -0.47220381330588745, -0.53971612677730796, 0.10786845735169709, -0.19624541612183205, -0.31999800304244663, 0.14306614083304967, 0.99425979244781248, 0.03387172291648638, 0.14968868529190824, 0.011894333401721982, 0.075656613302660505, 0.022862266059295963, -0.26965162250871516, 0.073753555933645479, 0.0048070966681389221, -0.15459182930038323, 0.025800801046486448, 0.093357513306786988, -0.1169508944902216, 0.075165248674234936, -0.019813398567632378, -0.14209276193736239, -0.059795178222424028, -0.12295505261503357, 0.11896778799789515, -0.0017384277798700152, -0.15682094558161805, 0.097841495815239751, -0.099491180197666146, 0.015489953863730215, 0.15352284910605901, -0.021232613419929668, 0.063761703088166352, 0.13589468098304547, 0.0016171532144881639, 0.013629790561299863, -0.010927956363536735, -0.016742725017628288, -0.0025273966598781156, -0.029776980683946429, -0.023661004977422195, -0.013711858741934946, 0.10078884284737584, 0.0076967731914105372, 0.0080908009130123311, -0.029526171379933127, 0.04106459964648173, -0.0070470973531816042, -0.039680031165641304, 0.039089450334457314, -0.0023160386584446437, 0.034077798726528725, -0.037142024633166459, -0.0072801249946485144, 0.21017210960943317, -0.23528005734407406, -0.017975229022209674, 0.48685059105035716, -0.55259915034724472, 0.025539246950632186, 0.95145065406132423, 0.034832920644000932, -0.0037834756734715569, -0.051241447089884179, 0.0058590252496753814, -0.046378959452269247, 0.049424108029042423, 0.017689847711363001, -0.030603989210372697, -0.085761045465403224, 0.0034587067221774326, 0.0084278063146856399, 0.0017871504920116393, -0.034769125866918271, -0.024803263068124082, 0.020561680011880024, -0.03343151038383714, 0.01822847782449272, 0.013612448068023655, -0.24967200747021739, 0.28304330502067138, -0.03035261072051542, -0.09949227326753976, 0.011221047755067114, 0.045667369166645211, -0.11327569245145092, 0.11210422984194339, 0.18990600220614121, -0.020764396911882425, 0.25348501939388368, 0.24140525585280251, -0.39540781553676646, 0.33366941309127629, 0.094186893420220616, -0.13450396115807436, -0.0032851388285521331, 0.5483431737683685, -0.00053646003551232647, 0.002965880581235235, -0.00068005249978602539, 0.0018633725286378048, 0.00038184229509626293, 0.0014942063446199093, -0.0021303139349954652, 0.00087690214270998883, 0.00022219270123754643, -0.0019432647661855409, -0.00075660128435960073, 0.00096748920892093001, -0.0021033910520187118, 0.00059216952903784503, -9.5002606140938937e-05, 1.1989827534302375e-05, -0.0024355010888776015, 0.00059734667082649885, -0.083040718330811086, -0.065763777873545967, 0.13450880258439321, 0.025217379860404742, -0.088624628165238375, -0.027132931504436644, -0.065300278540739207, -0.11192478859313452, -0.056082381569488568, -0.070293533858017773, 0.078467644944123588, -0.038921258684170429, -0.1690106805330463, 0.016333042359632691, 0.23528932349160078, -0.027659469193428484, -0.11782801332320779, 0.066451742005305001] 

dLdw = []
for i in range(162):
	dLdw.append(0)

ypredict = 0
learningrate = 1
Gt = []
Gtb = 0
for i in range(162):
	Gt.append(0)
count = 0
#print W
print'--------------------Gradient descent-----------------------------------------'
while True:
	RMSE = 0
	count = count + 1
	for i in range(471):
		for j in range(12):
#--------------------------numbers of x,y data-----------------------------------
			yhat = float(x[18*j+9][i+9])
			xx = []
			for k in range(18):
				xx = xx+x[18*j+k][i:i+9]
			X = np.array(xx)
			W = np.array(w)
			ypredict = np.dot(X,W)+b+lambdaa*np.dot(W,W)
			RMSE = RMSE + (yhat-ypredict)**2
#------------------------- Yhat,Ypredict,X ok-----------------------------------
			dLdb = dLdb + (-2)*(yhat-ypredict)
			if count > 10:
				Gtb = Gtb
			else:
				Gtb = Gtb + dLdb**2
			for k in range(162):
				dLdw[k] = dLdw[k] + (-2)*(yhat-ypredict)*xx[k] + 2*lambdaa*w[k]
				if count > 10:
					Gt[k] = Gt[k]
				else:
					Gt[k] = Gt[k] + dLdw[k]**2
			#print Gt
	#print dLdb,dLdw[1],dLdw[2]
	print '------------------train RMSE-------------------------------'
	RMSE = (float(RMSE/5640))**0.5
	print '----------------------w------------------------------------'
	print w,Gtb,b,RMSE,count
	print '----------------------stop condition---------------------------------'

	if (count == 5000):
		print round(b),w
		break
	#if (count%1000 == 0):
			#learningrate = learningrate*2
	for i in range(162):
		if Gt[i]!= 0:
			w[i] = w[i] - learningrate*dLdw[i]/(Gt[i]**0.5)
		b = b - learningrate*dLdb/(Gtb**0.5)
		dLdw[i] = 0
	dLdb = 0
print'------------------------start predict test_X--------------------------------'

fin = open('test_X.csv','r')
data = []
for line in fin:
		data.append(line.strip().split(','))
fin.close()

fout = open('test2.csv','w')
fout.write('id,value\n')
for i in range(240):
	x = []
	for j in range(18):
		for k in range(2,11):
			if data[i*18+j][k] == 'NR':
				x.append(0)
			else:
				x.append(float(data[i*18+j][k]))
	X = np.array(x)
	Y = np.dot(X,W)+b+lambdaa*np.dot(W,W)
	fout.write('id_')
	fout.write(str(i))
	fout.write(',')
	fout.write(str(Y))
	fout.write('\n')
print'----------------------------finish------------------------------------------'









	
	
	
	
	



























