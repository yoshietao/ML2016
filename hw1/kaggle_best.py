import numpy as np
#----------------------read file----------------------------------
f = open('train.csv','r')
data = []

for line in f:
	data.append(line.strip().split(','))
f.close()
#////train.csv///

w,h = 480,12*18
x = [[0 for x in range(w)] for y in range(h)] 

for k in range(12):				#column,month
	for l in range (18):		#column,feature
		for i in range(20):		#row,day
			for j in range(3,27):
				if data[(20*k+i)*18+l+1][j] == 'NR':
					x[l+k*18][i*24+j-3] = 0
				else:
					x[l+k*18][i*24+j-3] = float(data[(20*k+i)*18+l+1][j])
#print x
#---------------------------variables-------------------------------
X = np.array(x)
print X.shape
b,dLdb = 0,0
w = []
for i in range(162):   
	w.append(0)
lambdaa = 0.0001
b = -0.0878753410532 #5.7123
w[0:162] = [0.090718654041154326, -0.15413711007326258, 0.072476449969856777, -0.11943050102540638, -0.017261722059552901, 0.043719171144590015, -0.057484987413843135, 0.11566205957983187, 0.012441733927279494, -0.054752837761106794, -0.025429293721391376, -0.014110130720901575, -0.013931613766711573, 0.010411067518202182, 0.093226362954483943, 0.066576406070198879, 0.19098142742061305, 0.47167975206698332, 0.12196777782175258, 0.023664950353072773, 0.052770811501802656, -0.21947210241577661, 0.3747029143887014, -0.067341943775218252, -0.31394709633167511, 0.24014970897006416, 0.94811984252455139, -0.37031051182230945, -0.0071872873564678696, -0.47224864675130007, -0.52007390534723952, 0.13173717828503764, -0.21059232584233659, -0.31496168585738621, 0.12470332990117712, 0.97107726751780377, 0.03468880232023077, 0.15106355226083137, 0.012046645549833533, 0.071611982088203768, 0.01179038385196962, -0.26241699726580653, 0.062531990060392006, 0.013700308363510928, -0.16168616366887956, 0.028079390115618663, 0.083906439537984531, -0.11293900657215096, 0.050957831950032707, -0.016551935024807896, -0.15328672349091466, -0.043934697738636876, -0.14994759242198533, 0.11954299566033202, -0.00083473158595338067, -0.15537737169924359, 0.09483907246364344, -0.078891354832968483, 0.026236127412363107, 0.14968670969199988, -0.013718716824694596, 0.073487490374450556, 0.14062089703385952, 0.0020727603016428174, 0.011161989254519361, -0.0086099650432076655, -0.024410156854383268, 0.010245625867927386, -0.039887128223203387, -0.011473204284594382, -0.020140302546603036, 0.10171621277770962, 0.0056005567837561637, 0.012767106616247968, -0.033117780844901856, 0.041582271942606872, -0.007348531281422664, -0.035890722944975278, 0.03221020675765459, -0.0021181185132928956, 0.036807145412288238, -0.034915606632652564, -0.013787958854761046, 0.21880003222127814, -0.2383536420404288, -0.026570535890866612, 0.5000433495759673, -0.55575405486026686, 0.021554959332870331, 0.952623367091321, 0.034674394470284177, -0.0038331515464655906, -0.051408916952196189, 0.0060253594954883883, -0.046949911703560103, 0.049302316203532974, 0.017556850362117918, -0.030742259425359405, -0.08561703202253354, -0.018642146989626986, 0.026809206210096689, 0.027891750701830021, -0.060797930581151204, -0.041323785044542233, 0.066718237548106463, -0.10138300425319291, 0.060640848977132095, 0.012246624055215719, -0.25985135151059024, 0.29966561055403329, -0.037786284983173234, -0.094193559424412057, 0.0046516819943043883, 0.050764499033659809, -0.11401566660487929, 0.11844986750400578, 0.18274404130210711, -0.027904746889936972, 0.24602031613500824, 0.23691109629556603, -0.40596602895376754, 0.33093813912764847, 0.096216448339988381, -0.1349156232381265, -0.009327248543313571, 0.5519618630719898, -0.0006465398588152945, 0.0029247567875138277, -0.00053436896640176798, 0.0018266298350285619, 0.00038379447493685039, 0.0014933774800122721, -0.0022834936990967819, 0.00086878744421517895, 0.00024470451439140132, -0.0020688582172781419, -0.00076091301478132211, 0.0010269929701102942, -0.002135729982214131, 0.00058655222510684804, -6.6286609866305211e-05, -7.1642515074251591e-05, -0.0024286658774985248, 0.00050765880431470059, -0.095007892590438653, -0.075242665439009399, 0.14432599562256931, 0.033216142045775297, -0.093731278545607852, -0.034782501367042487, -0.063564112395620362, -0.11035843750854485, -0.060901521347234075, -0.062291642700157114, 0.088873775584276768, -0.046348826363981889, -0.16856433138170115, 0.0061536849251465067, 0.25331674007844546, -0.02839328486555668, -0.1307212431631038, 0.077888898513241808] 

dLdw = []
for i in range(162):
	dLdw.append(0)

ypredict = 0
learningrate = 1
Gt = []
Gtb = 0
for i in range(162):
	Gt.append(0)
count = 0
#print W
print'--------------------Gradient descent-----------------------------------------'
while True:
	RMSE = 0
	count = count + 1
	for i in range(471):
		for j in range(12):
#--------------------------numbers of x,y data-----------------------------------
			yhat = float(x[18*j+9][i+9])
			xx = []
			for k in range(18):
				xx = xx+x[18*j+k][i:i+9]
			X = np.array(xx)
			W = np.array(w)
			ypredict = np.dot(X,W)+b
			RMSE = RMSE + (yhat-ypredict)**2
#------------------------- Yhat,Ypredict,X ok-----------------------------------
			dLdb = dLdb + (-2)*(yhat-ypredict)
			if count > 10:
				Gtb = Gtb
			else:
				Gtb = Gtb + dLdb**2
			for k in range(162):
				dLdw[k] = dLdw[k] + (-2)*(yhat-ypredict)*xx[k] + 2*lambdaa*w[k]
				if count > 10:
					Gt[k] = Gt[k]
				else:
					Gt[k] = Gt[k] + dLdw[k]**2
			#print Gt
	#print dLdb,dLdw[1],dLdw[2]
	print '------------------train RMSE-------------------------------'
	RMSE = (float(RMSE/5640))**0.5
	print '----------------------w------------------------------------'
	print w,Gtb,b,RMSE,count
	print '----------------------stop condition---------------------------------'

	if (count == 5000):
		print round(b),w
		break
	#if (count%1000 == 0):
			#learningrate = learningrate*2
	for i in range(162):
		if Gt[i]!= 0:
			w[i] = w[i] - learningrate*dLdw[i]/(Gt[i]**0.5)
		b = b - learningrate*dLdb/(Gtb**0.5)
		dLdw[i] = 0
	dLdb = 0
print'------------------------start predict test_X--------------------------------'

fin = open('test_X.csv','r')
data = []
for line in fin:
		data.append(line.strip().split(','))
fin.close()

fout = open('test2.csv','w')
fout.write('id,value\n')
for i in range(240):
	x = []
	for j in range(18):
		for k in range(2,11):
			if data[i*18+j][k] == 'NR':
				x.append(0)
			else:
				x.append(float(data[i*18+j][k]))
	X = np.array(x)
	Y = np.dot(X,W)+b
	fout.write('id_')
	fout.write(str(i))
	fout.write(',')
	fout.write(str(Y))
	fout.write('\n')
print'----------------------------finish------------------------------------------'









	
	
	
	
	



























